{"version":3,"sources":["Controls/Controls.js","CardListItem/CardListItem.js","CardList/CardList.js","FaveListItem/FaveListItem.js","FaveList/FaveList.js","WishListItem/WishListItem.js","WishList/WishList.js","Aside/Aside.js","Card/Card.js","Header/Header.js","Deck/Deck.js","CardArea/CardArea.js","App/App.js","serviceWorker.js","index.js"],"names":["Controls","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","updateCardName","event","newSuggestions","target","value","length","cards","filter","card","cardName","toLowerCase","startsWith","map","setState","suggestions","chooseSuggestion","textInput","current","focus","id","submitCard","preventDefault","matchedCard","validateCardName","addCardToList","throwInvalidCardNameError","clearInput","find","state","userCardsData","includes","hasDuplicates","isInvalidCardName","addUserCard","React","createRef","errorMessage","_this2","react_default","a","createElement","className","type","onChange","placeholder","ref","onClick","key","slice","Component","CardListItem","removeListItem","newUserCardsData","toArray","splice","cardIndex","saveArray","increaseCardCount","cardCount","updateUserCardsData","decreaseCardCount","newCount","CardList","cardNames","sort","index","src_CardListItem_CardListItem","compareBuilds","FaveListItem","removeFaveListItem","newFaveDecks","faveDecks","deckIndex","deckName","FaveList","deck","src_FaveListItem_FaveListItem","WishListItem","removeWishListItem","newWishList","wishList","increaseWishListCount","wishListCount","updateWishList","decreaseWishListCount","WishList","src_WishListItem_WishListItem","price","Aside","alt","src","asideView","src_Controls_Controls","CardList_CardList","FaveList_FaveList","WishList_WishList","Card","setPopUpData","displayPopUp","addToWishlist","cardAreaView","imageSource","getPriceString","concat","userCount","requiredCount","Header","setAsideViewMyCards","setAsideView","setCardAreaView","setAsideViewFaveDecks","setAsideViewWishList","Deck","handleClick","expandDeck","userDeck","addToFaveDecks","getDeckImage","images","signatureCards","forEach","sigCard","push","image","CardArea","num","toFixed","popUpCard","setPopUpView","returnToScreen","deckObj","cardsInDeck","getExpandedDeckInfo","cardInDeck","userCard","cardCounts","Math","min","displayDeck","src_Card_Card","decks","_this3","b","src_Deck_Deck","sortDecks","userDecks","sortCards","popUpView","sideboards","src_Header_Header","App","newUserDecks","userDeckNames","setDeckPrices","getCurrentPrices","timeOfCache","JSON","parse","localStorage","getItem","Date","now","url","getURLArray","Promise","all","getPricePromises","then","priceData","storePriceData","setCurrentPrices","catch","err","console","log","replace","promises","i","ceil","fetch","join","response","json","data","_ref","cardPrices","apply","toConsumableArray","name","usd","setItem","stringify","newCards","apiCard","pricedCard","parseFloat","newCard","sortCardsByName","card1","card2","arrayName","arrayToSave","defineProperty","view","wishlistCard","faveDeck","storedUserCards","storedFaveDecks","storedWishList","keys","cardPrice","priceMultiplier","max","parsedCards","legalCards","parsedDecks","legalDecks","Aside_Aside","src_CardArea_CardArea","Boolean","window","location","hostname","match","ReactDOM","render","src_App_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.66d0113d.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/main.scss';\n\nclass Controls extends Component {\n  constructor(props) {\n    super(props);\n    this.textInput = React.createRef();\n    this.state = {\n      cardName: '',\n      isInvalidCardName: false,\n      hasDuplicates: false,\n      suggestions: []\n    };\n  }\n\n  updateCardName = event => {\n    let newSuggestions = [];\n    if (event.target.value.length !== 0) {\n      newSuggestions = this.props.cards\n        .filter(card => {\n          const cardName = card.cardName.toLowerCase();\n          return cardName.startsWith(event.target.value.toLowerCase());\n        })\n        .map(card => card.cardName);\n    }\n    this.setState({\n      cardName: event.target.value,\n      suggestions: newSuggestions\n    });\n  };\n\n  chooseSuggestion = event => {\n    this.textInput.current.focus();\n    this.setState({\n      cardName: event.target.id,\n      suggestions: []\n    });\n  };\n\n  submitCard = event => {\n    event.preventDefault();\n    const matchedCard = this.validateCardName();\n    if (matchedCard) {\n      this.addCardToList(matchedCard.cardName);\n    } else {\n      this.throwInvalidCardNameError();\n    }\n    this.clearInput();\n  };\n\n  validateCardName = () => {\n    return this.props.cards.find(card => {\n      return card.cardName.toLowerCase() === this.state.cardName.toLowerCase();\n    });\n  };\n\n  addCardToList = cardName => {\n    let cardNames = this.props.userCardsData.map(card => card.cardName);\n    if (!cardNames.includes(cardName)) {\n      this.setState({\n        hasDuplicates: false,\n        isInvalidCardName: false\n      });\n      this.props.addUserCard(cardName);\n    } else {\n      this.setState({\n        hasDuplicates: true,\n        isInvalidCardName: false\n      });\n    }\n  };\n\n  throwInvalidCardNameError = () => {\n    this.setState({ isInvalidCardName: true });\n  };\n\n  clearInput = () => {\n    this.textInput.current.focus();\n    this.setState({\n      cardName: '',\n      suggestions: []\n   });\n  };\n\n  render() {\n    let errorMessage;\n    if (this.state.isInvalidCardName) {\n      errorMessage = 'The card name you entered is not in the database.';\n    } else if (this.state.hasDuplicates) {\n      errorMessage = 'This card is already in your list.';\n    }\n    return (\n      <form>\n        <div className=\"controls\">\n          <div className=\"controls--div\">\n            <input\n              type=\"text\"\n              className=\"controls--input\"\n              onChange={this.updateCardName}\n              placeholder=\"Enter cards you own\"\n              value={this.state.cardName}\n              ref={this.textInput}\n            />\n            <button className=\"controls--button\" onClick={this.submitCard}>\n              Add Card\n            </button>\n          </div>\n          <div className=\"controls--suggestion-area\">\n            {this.state.suggestions.map(cardName => {\n              return (\n                <span\n                  className=\"controls--suggestion\"\n                  key={cardName}\n                  id={cardName}\n                  onClick={this.chooseSuggestion}\n                >\n                  {cardName.slice(0, 24)}\n                </span>\n              );\n            })}\n          </div>\n        </div>\n\n        <p className=\"controls--error\">{errorMessage}</p>\n      </form>\n    );\n  }\n}\n\nexport default Controls;","import React, { Component } from 'react';\nimport '../styles/main.scss';\n\nclass CardListItem extends Component {\n  removeListItem = () => {\n    const [...newUserCardsData] = this.props.userCardsData;\n    newUserCardsData.splice(this.props.cardIndex, 1);\n    this.props.saveArray('userCardsData', newUserCardsData);\n  };\n\n  increaseCardCount = () => {\n    if (this.props.cardCount < 4) {\n      this.updateUserCardsData(this.props.cardCount + 1);\n    }\n  };\n\n  decreaseCardCount = () => {\n    if (this.props.cardCount > 1) {\n      this.updateUserCardsData(this.props.cardCount - 1);\n    }\n  };\n\n  updateUserCardsData = newCount => {\n    const newUserCardsData = this.props.userCardsData.map(card => {\n      if (this.props.cardName === card.cardName) {\n        card.cardCount = newCount;\n      }\n      return card;\n    });\n    this.props.saveArray('userCardsData', newUserCardsData);\n  };\n\n  render() {\n    return (\n      <li id={this.props.cardIndex} className=\"list--li\">\n        {this.props.cardName}\n        <span className=\"listprice--span\">\n          <i className=\"fas fa-minus\" onClick={this.decreaseCardCount} />\n          <span> {this.props.cardCount}</span>\n          <i className=\"fas fa-plus\" onClick={this.increaseCardCount} />\n          <i className=\"far fa-trash-alt\" onClick={this.removeListItem} />\n        </span>\n      </li>\n    );\n  }\n}\n\nexport default CardListItem;\n","import React from 'react'\nimport CardListItem from '../CardListItem/CardListItem.js';\nimport '../styles/main.scss';\n\nfunction CardList(props) {\n  const cardNames = props.userCardsData.map(card => card.cardName);\n  cardNames.sort();\n  return (\n    <div>\n      <h1 className=\"list--h1\">My Cards</h1>\n      <ul className=\"list--ul\">\n        {\n          cardNames.map((cardName, index) => {\n            return (\n              <CardListItem \n                cardName={cardName}\n                cardIndex={index}\n                cardCount={props.userCardsData[index].cardCount}\n                key={cardName}\n                userCardsData={props.userCardsData}\n                saveArray={props.saveArray}/>\n            )\n          }, this)\n        }\n      </ul>\n      <button className=\"compare-builds--button\" onClick={props.compareBuilds}>Compare Deck Prices</button>\n    </div>\n  )\n}\n\nexport default CardList;","import React, { Component } from 'react';\nimport '../styles/main.scss';\n\nclass FaveListItem extends Component {\n  removeFaveListItem = () => {\n    const [...newFaveDecks] = this.props.faveDecks;\n    newFaveDecks.splice(this.props.deckIndex, 1);\n    this.props.saveArray('faveDecks', newFaveDecks);\n  };\n\n  render() {\n    return (\n      <li id={this.props.deckIndex} className=\"list--li\">\n        <i onClick={this.removeFaveListItem} className=\"far fa-trash-alt fave--trash\" />\n        {this.props.deckName}\n      </li>\n    );\n  }\n}\n\nexport default FaveListItem;\n","import React from 'react';\nimport FaveListItem from '../FaveListItem/FaveListItem.js'\nimport '../styles/main.scss';\n\nfunction FaveList(props) {\n  return(\n    <div>\n      <h1 className=\"list--h1\">Saved Decks</h1>\n      <ul className=\"list--ul\">\n        {\n          props.faveDecks.map((deck, index) => {\n            return (\n            <FaveListItem\n              deckName={deck.deckName}\n              deckIndex={index}\n              key={deck.deckName}\n              faveDecks={props.faveDecks}\n              saveArray={props.saveArray}/>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default FaveList;","import React, { Component } from \"react\";\nimport '../styles/main.scss';\n\nclass WishListItem extends Component {\n  removeWishListItem = () => {\n    const [...newWishList] = this.props.wishList;\n    newWishList.splice(this.props.cardIndex, 1);\n    this.props.saveArray('wishList', newWishList);\n  }\n\n  increaseWishListCount = () => {\n    if (this.props.wishListCount < 4) {\n      this.updateWishList(this.props.wishListCount + 1);\n    }\n  }\n\n  decreaseWishListCount = () => {\n    if (this.props.wishListCount > 1) {\n      this.updateWishList(this.props.wishListCount - 1);\n    }\n  }\n\n  updateWishList = (newCount) => {\n    const newWishList = this.props.wishList.map(card => {\n      if (this.props.cardName === card.cardName) {\n        card.wishListCount = newCount;\n      }\n      return card;\n    });\n    this.props.saveArray('wishList', newWishList);\n  }\n\n  render() {\n    return <li id={this.props.cardIndex} className=\"list--li\">\n        {this.props.cardName}\n        <span className=\"listprice--span\">\n          <i className=\"fas fa-minus\" onClick={this.decreaseWishListCount} />\n          <span> {this.props.wishListCount} </span>\n          <i className=\"fas fa-plus\" onClick={this.increaseWishListCount} />\n          <i className=\"far fa-trash-alt\" onClick={this.removeWishListItem} />\n        </span>\n      </li>;\n  }\n}\n\nexport default WishListItem;","import React from 'react';\nimport WishListItem from '../WishListItem/WishListItem.js'\nimport '../styles/main.scss';\n\nfunction WishList(props) {\n  return(\n    <div>\n      <h1 className=\"list--h1\">Wish List</h1>\n      <ul className=\"list--ul\">\n        {\n          props.wishList.map((card, index) => {\n            return(\n              <WishListItem\n                cardName={card.cardName}\n                cardIndex={index}\n                wishListCount={card.wishListCount}\n                key={card.cardName}\n                wishList={props.wishList}\n                saveArray={props.saveArray}\n                price={card.price}/>\n            )\n          })\n        }\n      </ul>\n    </div>\n  )\n}\n\nexport default WishList;","import React from 'react';\nimport '../styles/main.scss';\nimport Controls from '../Controls/Controls.js';\nimport CardList from '../CardList/CardList.js';\nimport FaveList from '../FaveList/FaveList.js';\nimport WishList from '../WishList/WishList.js';\n\nfunction Aside(props) {  \n  return (\n    <aside className=\"aside\">\n      <img alt=\"Magic The Gathering\" src=\"./magic_logo.png\" className=\"aside--magic-logo\"></img>\n      {props.asideView === \"myCardList\" && \n        <div>\n          <Controls\n            addUserCard={props.addUserCard}\n            cards={props.cards}\n            userCardsData={props.userCardsData}/>\n          <CardList \n            userCardsData={props.userCardsData} \n            compareBuilds={props.compareBuilds}\n            saveArray={props.saveArray}/>\n          </div>}\n      {props.asideView === \"faveDecks\" &&\n        <FaveList \n          faveDecks={props.faveDecks}\n          saveArray={props.saveArray}/>}\n      {props.asideView === \"wishList\" &&\n        <WishList \n          wishList={props.wishList}\n          saveArray={props.saveArray}/>}\n    </aside>\n  );\n}\n\nexport default Aside;","import React, { Component } from 'react';\nimport '../styles/main.scss';\n\nclass Card extends Component {\n  setPopUpData = () => {\n    this.props.displayPopUp(this.props.card);\n  };\n\n  addToWishlist = () => {\n    this.props.addToWishlist(this.props.card);\n  };\n\n  render() {\n    return (\n      <article className=\"card--container\">\n        {this.props.cardAreaView === 'myCardList' && (\n          <div>\n            <div className=\"card--header-div\">\n              <h2>{this.props.card.cardName}</h2>\n            </div>\n            <img\n              className=\"card--image\"\n              src={this.props.card.imageSource}\n              alt={this.props.card.cardName}\n              onClick={this.setPopUpData}\n            />\n            <div className=\"card--counter-container\">\n              <p className=\"card--counter\">\n                {this.props.card.cardCount} in My Cards\n              </p>\n            </div>\n          </div>\n        )}\n        {this.props.cardAreaView === 'expandedDeck' && (\n          <div>\n            <div className=\"card--header-div\">\n              <h2>{this.props.card.cardName}</h2>\n            </div>\n            <p>${this.props.getPriceString(this.props.card.price)}</p>\n            <img\n              className=\"card--image\"\n              src={this.props.card.imageSource}\n              alt={this.props.card.cardName}\n              onClick={this.setPopUpData}\n            />\n            <div className=\"card--counter-container\">\n              <p>\n                {`You have ${this.props.card.userCount}\n                   of ${this.props.card.requiredCount}`}\n              </p>\n              <button onClick={this.addToWishlist}>Add to Wish List</button>\n            </div>\n          </div>\n        )}\n        {this.props.cardAreaView === 'wishList' && (\n          <div>\n            <div className=\"card--header-div\">\n              <h2>{this.props.card.cardName}</h2>\n            </div>\n            <img\n              className=\"card--image\"\n              src={this.props.card.imageSource}\n              alt={this.props.card.cardName}\n              onClick={this.setPopUpData}\n            />\n            <div>\n              <p className=\"card--wishlist-price\">\n                Total Cost of {this.props.card.wishListCount} - $\n                {this.props.getPriceString(this.props.card.price * this.props.card.wishListCount)}\n              </p>\n            </div>\n          </div>\n        )}\n      </article>\n    );\n  }\n}\n\nexport default Card;\n","import React, { Component } from 'react';\nimport '../styles/main.scss';\n\nclass Header extends Component {\n  setAsideViewMyCards = () => {\n    this.props.setAsideView(\"myCardList\");\n    this.props.setCardAreaView(\"myCardList\");\n  }\n\n  setAsideViewFaveDecks = () => {\n    this.props.setAsideView(\"faveDecks\");\n    this.props.setCardAreaView(\"faveDecks\");\n  }\n\n  setAsideViewWishList = () => {\n    this.props.setAsideView(\"wishList\");\n    this.props.setCardAreaView(\"wishList\");\n  }\n\n  render() {\n    return(\n      <header className=\"header\">\n        <h1>Modern Magic Deck Advisor</h1>\n        <ul className=\"header--ul\">\n          <li onClick={this.setAsideViewMyCards} className=\"my-cards\">My Cards</li>\n          <li onClick={this.setAsideViewFaveDecks} className=\"fave-decks\">Saved Decks</li>\n          <li onClick={this.setAsideViewWishList} className=\"my-wish-list\">Wish List</li>\n        </ul>\n      </header>\n    )\n  }\n\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport '../styles/main.scss';\n\nclass Deck extends Component {\n  handleClick = () => {\n    this.props.setCardAreaView('expandedDeck');\n    this.props.expandDeck(this.props.userDeck);\n  };\n\n  addToFaveDecks = () => {\n    this.props.addToFaveDecks(this.props.userDeck);\n  };\n\n  getDeckImage = () => {\n    const images = [];\n    this.props.userDeck.signatureCards.forEach(sigCard => {\n      images.push(\n        this.props.cards.find(card => card.cardName === sigCard).imageSource\n      );\n    });\n    return images;\n  };\n\n  render() {\n    const images = this.getDeckImage();\n    return (\n      <article className=\"deck--container\">\n        <div>\n          <div className=\"deck--header-div\">\n            <h2 className=\"deck--name\">{this.props.userDeck.deckName}</h2>\n          </div>\n          <h3 className=\"price--value\">${this.props.userDeck.price}</h3>\n          <div className=\"deck--signature\">\n            {images.map(image => {\n              return (\n                <img\n                  className=\"deck--image\"\n                  src={image}\n                  alt={this.props.userDeck.deckName}\n                  key={image}\n                />\n              );\n            })}\n          </div>\n          {this.props.cardAreaView === 'compareDecks' && (\n            <button className=\"deck--button\" onClick={this.addToFaveDecks}>\n              Save Deck\n            </button>\n          )}\n          <button className=\"deck--card-button\" onClick={this.handleClick}>\n            Show all cards\n          </button>\n        </div>\n      </article>\n    );\n  }\n}\n\nexport default Deck;\n","import React, { Component } from 'react';\nimport '../styles/main.scss';\nimport Card from '../Card/Card.js';\nimport Header from '../Header/Header.js';\nimport Deck from '../Deck/Deck.js';\n\nclass CardArea extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      popUpCard: {},\n      cardsInDeck: []\n    };\n  }\n\n  getPriceString = (num) => {\n    return num.toFixed(2);\n  }\n\n  sortCards(cards) {\n    return cards.map(userCard => {\n      return (\n        <Card\n          card={userCard}\n          key={userCard.cardName}\n          cardAreaView={this.props.cardAreaView}\n          displayPopUp={this.displayPopUp}\n          getPriceString={this.getPriceString}\n        />\n      );\n    });\n  }\n\n  sortDecks(decks) {\n    decks.sort((a, b) => a.price - b.price);\n    return decks.map(userDeck => {\n      return (\n        <Deck\n          userDeck={userDeck}\n          key={userDeck.deckName}\n          expandDeck={this.expandDeck}\n          setCardAreaView={this.props.setCardAreaView}\n          addToFaveDecks={this.props.addToFaveDecks}\n          cardAreaView={this.props.cardAreaView}\n          cards={this.props.cards}\n        />\n      );\n    });\n  }\n\n  displayPopUp = card => {\n    this.setState({ popUpCard: card },\n      this.props.setPopUpView(true));\n  };\n\n  returnToScreen = () => {\n    this.props.setPopUpView(false);\n  };\n\n  expandDeck = deckObj => {\n    const cardsInDeck = this.props.getExpandedDeckInfo(deckObj);\n    cardsInDeck.map(cardInDeck => {\n      const matchedCard = this.props.userCardsData.find(userCard => {\n        return userCard.cardName === cardInDeck.cardName;\n      });\n      cardInDeck.requiredCount = deckObj.cardCounts[cardInDeck.cardName];\n      cardInDeck.userCount = matchedCard\n        ? Math.min(cardInDeck.requiredCount, matchedCard.cardCount)\n        : 0;\n      return cardInDeck;\n    });\n    this.setState({ cardsInDeck });\n  };\n\n  displayDeck = () => {\n    return this.state.cardsInDeck.map(card => {\n      return (\n        <Card\n          card={card}\n          key={card.cardName}\n          cardAreaView={this.props.cardAreaView}\n          displayPopUp={this.displayPopUp}\n          addToWishlist={this.props.addToWishlist}\n          getPriceString={this.getPriceString}\n        />\n      );\n    });\n  };\n\n  render() {\n    let cardAreaView = [];\n    switch (this.props.cardAreaView) {\n      case 'compareDecks':\n        cardAreaView = this.sortDecks(this.props.userDecks);\n        break;\n      case 'expandedDeck':\n        cardAreaView = this.displayDeck();\n        break;\n      case 'faveDecks':\n        cardAreaView = this.sortDecks(this.props.faveDecks);\n        break;\n      case 'wishList':\n        cardAreaView = this.sortCards(this.props.wishList);\n        break;\n      default:\n        cardAreaView = this.sortCards(this.props.userCardsData);\n        break;\n    }\n\n    return (\n      <div className=\"card-area\">\n        {this.props.popUpView && (\n          <div className=\"popup--div\">\n            <img\n              className=\"popup--card-image\"\n              src={this.state.popUpCard.imageSource}\n              alt={this.state.popUpCard.cardName}\n            />\n            <div className=\"popup--info\">\n              <div>\n                <h1>{this.state.popUpCard.cardName}</h1>\n                <h2>${this.state.popUpCard.price}</h2>\n                <div className=\"popup--div-scroll\">\n                  {this.state.popUpCard.decks.length > 0 && \n                    <p>Played in main deck of:</p>}\n                  <ul className=\"popup--list\">\n                    {this.state.popUpCard.decks.map(deck => {\n                      return <li key={deck}>{deck}</li>;\n                    })}\n                  </ul>\n                  {this.state.popUpCard.sideboards.length > 0 && \n                    <p>Played in sideboard of:</p>}\n                  <ul className=\"popup--list\">\n                    {this.state.popUpCard.sideboards.map(deck => {\n                      return <li key={deck}>{deck}</li>;\n                    })}\n                  </ul>\n                </div>\n              </div>\n              <i\n                onClick={this.returnToScreen}\n                className=\"far fa-times-circle\"\n              />\n            </div>\n          </div>\n        )}\n        <Header\n          setAsideView={this.props.setAsideView}\n          setCardAreaView={this.props.setCardAreaView}\n        />\n        <section className=\"card-area--section\">{cardAreaView}</section>\n      </div>\n    );\n  }\n}\n\nexport default CardArea;\n","import React, { Component } from 'react';\nimport '../styles/main.scss';\nimport Aside from '../Aside/Aside.js';\nimport CardArea from '../CardArea/CardArea.js';\n\nclass App extends Component {\n  constructor() {\n    super();\n    let storedUserCards = [];\n    let storedFaveDecks = [];\n    let storedWishList = [];\n    if (localStorage.getItem('userCardsData')) {\n      storedUserCards = JSON.parse(localStorage.getItem('userCardsData'));\n    }\n    if (localStorage.getItem('faveDecks')) {\n      storedFaveDecks = JSON.parse(localStorage.getItem('faveDecks'));\n    }\n    if (localStorage.getItem('wishList')) {\n      storedWishList = JSON.parse(localStorage.getItem('wishList'));\n    }\n    this.state = {\n      asideView: 'myCardList',\n      cardAreaView: 'myCardList',\n      popUpView: false,\n      cards: [],\n      decks: [],\n      userDecks: [],\n      userCardsData: storedUserCards,\n      faveDecks: storedFaveDecks,\n      wishList: storedWishList\n    };\n  }\n  \n  compareBuilds = () => {\n    const newUserDecks = [];\n    const userDeckNames = [];\n    this.state.userCardsData.forEach(card => {\n      this.state.decks.filter(deck => {\n        return deck.cards.includes(card.cardName)\n      }).forEach(deck => {\n        if (!userDeckNames.includes(deck.deckName)){\n          newUserDecks.push(deck)\n          userDeckNames.push(deck.deckName)\n        }\n      })\n    });\n    this.setDeckPrices(newUserDecks);\n  }\n\n  setDeckPrices(userDecks) {\n    const newUserDecks = userDecks.map(deck => {\n      deck.price = 0;\n      Object.keys(deck.cardCounts).forEach(cardInDeck => {\n        const cardPrice = this.state.cards.find(card => {\n          return card.cardName === cardInDeck;\n        }).price;\n        const userCard = this.state.userCardsData.find(card => {\n          return card.cardName === cardInDeck\n        });\n        if (userCard) {\n          const priceMultiplier = Math.max(0, (deck.cardCounts[cardInDeck] - userCard.cardCount))\n          deck.price += cardPrice * priceMultiplier;\n        } else {\n          deck.price += cardPrice * deck.cardCounts[cardInDeck];\n        }\n      });\n      deck.price = deck.price.toFixed(2);\n      return deck;\n    });\n    this.setState({\n      userDecks: newUserDecks,\n      cardAreaView: 'compareDecks',\n      popUpView: false\n    });\n  }\n\n  getExpandedDeckInfo = (deck) => {\n    return this.state.cards.filter(card => {\n      return deck.cards.includes(card.cardName);\n    });\n  }\n\n  componentDidMount() {\n    fetch('https://whateverly-datasets.herokuapp.com/api/v1/cards')\n      .then(cards => cards.json())\n      .then(parsedCards => {\n        const legalCards = parsedCards.cards.filter(card => {\n          return card.cardName !== 'Krark-Clan Ironworks';\n        });\n        console.log(legalCards)\n        this.getCurrentPrices(legalCards);\n      })\n      .catch(err => console.log('cards error', err))\n    fetch('https://whateverly-datasets.herokuapp.com/api/v1/decks')\n      .then(decks => decks.json())\n      .then(parsedDecks => {\n        const legalDecks = parsedDecks.decks.filter(deck => {\n          return deck.deckName !== 'KCI';\n        });\n        this.setState({ decks: legalDecks }\n      )})\n      .catch(err => console.log('decks error', err))\n  }\n\n  getCurrentPrices = (cards) => {\n    const timeOfCache = JSON.parse(localStorage.getItem('timeOfCache'))\n    const twentyFourHours = 24 * 60 * 60 * 1000;\n    if (!timeOfCache || Date.now() - timeOfCache > twentyFourHours) {\n      const url = this.getURLArray(cards);\n      Promise.all(this.getPricePromises(url))\n        .then(priceData => {\n          this.storePriceData(priceData);\n          this.setCurrentPrices(cards);\n        })\n        .catch(err => console.log('Promise.all error', err));\n    } else {\n      this.setCurrentPrices(cards);\n    }\n  }\n\n  getURLArray = (cards) => {\n    return cards.map(card => {\n      return `%21\"${card.cardName.replace(/\\s/g, '+')}\"`;\n    });\n  }\n\n  getPricePromises = (url) => {\n    const promises = [];\n    const root = 'https://api.scryfall.com/cards/search?q=f%3Am+unique%3Acards+%28';\n    for (let i = 0; i < Math.ceil(url.length / 40); i++) {\n      const index = 40 * i;\n      promises.push(fetch(root + url.slice(index, index + 40).join('+or+') + '%29')\n      .then(response => response.json())\n      .then(response => response.data)\n      .catch(err => console.log('price promise error', err)));\n    }\n    return promises;\n  }\n\n  storePriceData = (priceData) => {\n    const totalPriceData = [].concat(...priceData);\n    const cardPrices = totalPriceData.map(card => {\n      return { cardName: card.name, price: card.usd };\n    });\n    localStorage.setItem('timeOfCache', JSON.stringify(Date.now()));\n    localStorage.setItem('cardPrices', JSON.stringify(cardPrices));\n  }\n\n  setCurrentPrices = (cards) => {\n    const newCards = cards.map(card => {\n      const apiCard = JSON.parse(localStorage.getItem('cardPrices'))\n        .find(pricedCard => pricedCard.cardName.includes(card.cardName))\n      if (apiCard.price) {\n        card.price = parseFloat(apiCard.price);\n      }\n      return card;\n    });\n    this.setState({ cards: newCards });\n  }\n\n  addUserCard = (cardName) => {\n    const newCard = this.state.cards.find(card => {\n      return cardName === card.cardName;\n    });\n    newCard.cardCount = 1;\n    const newUserCardsData = this.state.userCardsData.concat([newCard]);\n    newUserCardsData.sort(this.sortCardsByName);\n    this.saveArray('userCardsData', newUserCardsData);\n  }\n\n  sortCardsByName = (card1, card2) => {\n    if (card1.cardName < card2.cardName) {\n      return -1;\n    } else {\n      return 1;\n    }\n  }\n\n  saveArray = (arrayName, arrayToSave) => {\n    this.setState({ [arrayName]: arrayToSave },\n      localStorage.setItem(arrayName, JSON.stringify(arrayToSave)));\n  }\n\n  setAsideView = (view) => {\n    this.setState({\n      asideView: view,\n      popUpView: false\n    })\n  }\n\n  setCardAreaView = (view) => {\n    this.setState({\n      cardAreaView: view,\n      popUpView: false\n    });\n  }\n\n  setPopUpView = (view) => {\n    this.setState({ popUpView: view })\n  }\n\n  addToWishlist = (card) => {\n    const duplicate = this.state.wishList.find(wishlistCard => {\n      return wishlistCard.cardName === card.cardName;\n    });\n    if (!duplicate) {\n      card.wishListCount = 1;\n      const newWishList = this.state.wishList.concat([card]);\n      newWishList.sort(this.sortCardsByName);\n      this.saveArray('wishList', newWishList);\n    }\n  }\n\n  addToFaveDecks = (deck) => {\n    const duplicate = this.state.faveDecks.find(faveDeck => {\n      return faveDeck.deckName === deck.deckName;\n    });\n    if (!duplicate) {\n      const newFaveDecks = this.state.faveDecks.concat([deck]);\n      newFaveDecks.sort((a, b) => {\n        return a.deckName < b.deckName ? -1 : 1;\n      });\n      this.saveArray('faveDecks', newFaveDecks);\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"app\">\n        <Aside\n          addUserCard={this.addUserCard}\n          userCardsData={this.state.userCardsData}\n          cards={this.state.cards}\n          compareBuilds={this.compareBuilds}\n          asideView={this.state.asideView}\n          faveDecks={this.state.faveDecks}\n          wishList={this.state.wishList}\n          saveArray={this.saveArray}/>\n        <CardArea\n          userCardsData={this.state.userCardsData}\n          faveDecks={this.state.faveDecks}\n          setAsideView={this.setAsideView}\n          cardAreaView={this.state.cardAreaView}\n          setCardAreaView={this.setCardAreaView}\n          userDecks={this.state.userDecks}\n          getExpandedDeckInfo={this.getExpandedDeckInfo}\n          addToWishlist={this.addToWishlist}\n          addToFaveDecks={this.addToFaveDecks}\n          wishList={this.state.wishList}\n          cards={this.state.cards}\n          popUpView={this.state.popUpView}\n          setPopUpView={this.setPopUpView}/>\n      </div>\n    )\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.scss';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}